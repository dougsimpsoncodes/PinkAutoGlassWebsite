#!/bin/sh
# Pink Auto Glass - Pre-commit Security Hook
# Prevents commits containing secrets, formatting issues, or type errors
# Install: chmod +x .git-hooks/pre-commit

set -e

echo "🔒 Running pre-commit security checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track overall status
CHECKS_FAILED=0

# ============================================================================
# 1. SECRET SCANNING
# ============================================================================
echo "\n📡 Scanning for secrets..."

if command -v gitleaks >/dev/null 2>&1; then
  if gitleaks protect --staged --redact --config=.gitleaks.toml; then
    echo "${GREEN}✓ No secrets detected${NC}"
  else
    echo "${RED}✗ SECRETS DETECTED!${NC}"
    echo "${YELLOW}Fix: Remove secrets from staged files${NC}"
    echo "View details: gitleaks protect --staged --verbose"
    CHECKS_FAILED=1
  fi
else
  echo "${YELLOW}⚠ gitleaks not installed - skipping secret scan${NC}"
  echo "Install: brew install gitleaks (macOS) or see https://github.com/gitleaks/gitleaks"
fi

# ============================================================================
# 2. FORBIDDEN FILES CHECK
# ============================================================================
echo "\n📂 Checking for forbidden files..."

FORBIDDEN_FILES=(
  ".env.local"
  ".env.production"
  ".env.development"
  ".env.staging"
)

for file in "${FORBIDDEN_FILES[@]}"; do
  if git diff --cached --name-only | grep -q "^${file}$"; then
    echo "${RED}✗ Forbidden file staged: ${file}${NC}"
    echo "${YELLOW}Fix: git reset HEAD ${file}${NC}"
    CHECKS_FAILED=1
  fi
done

if [ $CHECKS_FAILED -eq 0 ]; then
  echo "${GREEN}✓ No forbidden files staged${NC}"
fi

# ============================================================================
# 3. TYPESCRIPT TYPE CHECK
# ============================================================================
echo "\n🔍 Checking TypeScript types..."

if npm run build >/dev/null 2>&1; then
  echo "${GREEN}✓ TypeScript compilation successful${NC}"
else
  echo "${RED}✗ TypeScript errors found${NC}"
  echo "${YELLOW}Fix: Run 'npm run build' to see errors${NC}"
  CHECKS_FAILED=1
fi

# ============================================================================
# 4. LINTING
# ============================================================================
echo "\n🧹 Running ESLint..."

if npm run lint >/dev/null 2>&1; then
  echo "${GREEN}✓ No linting errors${NC}"
else
  echo "${RED}✗ Linting errors found${NC}"
  echo "${YELLOW}Fix: Run 'npm run lint' to see errors${NC}"
  CHECKS_FAILED=1
fi

# ============================================================================
# 5. SENSITIVE PATTERN CHECK (Manual)
# ============================================================================
echo "\n🔎 Scanning for sensitive patterns..."

# Check for console.log with potential PII
if git diff --cached | grep -E "console\.(log|error|warn)\(.*(phone|email|address|password)" >/dev/null 2>&1; then
  echo "${YELLOW}⚠ Warning: Potential PII in console statements${NC}"
  echo "Review: Ensure no phone numbers, emails, or addresses are logged"
  # Don't fail, just warn
fi

# Check for hardcoded URLs that should be env vars
if git diff --cached | grep -E "(https?://[a-z0-9-]+\.supabase\.co)" | grep -v "NEXT_PUBLIC_SUPABASE_URL" >/dev/null 2>&1; then
  echo "${YELLOW}⚠ Warning: Hardcoded Supabase URL detected${NC}"
  echo "Consider using: process.env.NEXT_PUBLIC_SUPABASE_URL"
fi

# Check for service role key imports in client files
if git diff --cached --name-only | grep -E "^src/(app|components)/" >/dev/null 2>&1; then
  if git diff --cached | grep -E "SUPABASE_SERVICE_ROLE_KEY|supabaseAdmin" >/dev/null 2>&1; then
    echo "${RED}✗ Service role key usage detected in client-side code!${NC}"
    echo "${YELLOW}Fix: Use anon key for client-side, service role only in API routes${NC}"
    CHECKS_FAILED=1
  fi
fi

# ============================================================================
# FINAL RESULT
# ============================================================================
echo "\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ $CHECKS_FAILED -eq 0 ]; then
  echo "${GREEN}✓ All pre-commit checks passed!${NC}"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  exit 0
else
  echo "${RED}✗ Pre-commit checks FAILED${NC}"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "\n${YELLOW}To skip these checks (NOT RECOMMENDED):${NC}"
  echo "  git commit --no-verify"
  echo "\n${YELLOW}To fix issues:${NC}"
  echo "  1. Review the errors above"
  echo "  2. Fix the issues in your code"
  echo "  3. Stage the fixes: git add <files>"
  echo "  4. Try committing again"
  exit 1
fi
